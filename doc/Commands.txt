--------------------------
Creating your own commands
-------------------------

User-defined commands can be defined by creating a user commands command file.

To start, create a new text file called "usercommands.toml" in this directory:

C:\Users\<username>\AppData\Local\TwitchPlaysRTS\TwitchPlaysRTS\

You can also find it by clicking in the application's menu under TwitchPlaysRTS -> Open Config Directory.

To reload commands, simply disconnect the program, and reconnect.

--------------
Basic commands
--------------

If you just want to add some basic commands, without using fancy regex features, here are some examples. To use these, just copy-paste them into the usercommands.toml file and edit to your needs.

* Moving the mouse to a predefined location:

[[command]]
regex = "!centermouse"

[[command.action]]
action = "movemouse"

[command.action.params]
x = "50"
y = "50"

* Pressing a key (for a list of all possible keys, see keys.txt)

[[command]]
regex = "!towncenter"

[[command.action]]
action = "presskey"

[command.action.params]
key = "h"

* Pressing a key and holding shift (also works with alt and ctrl)

[[command]]
regex = "!allidles"

[[command.action]]
action = "presskey"

[command.action.params]
key = "."
shift = true

* Pressing two keys at once

[[command]]
regex = "!leftup"

[[command.action]]
action = "presskey"

[command.action.params]
key = ["left", "up"]

* Holding down a key (duration is in seconds)

[[command]]
regex = "!north"

[[command.action]]
action = "presskey"

[command.action.params]
key = "up"
duration = "1"

* Clicking the mouse

[[command]]
regex = "!click"

[[command.action]]
action = "click"

[command.action.params]
button = "left"

* Performing multiple actions in one command:

[[command]]
regex = "!buildfarm"

[[command.action]]
action = "key"

[command.action.params]
key = "."

[[command.action]]
action = "key"

[command.action.params]
key = "q"

[[command.action]]
action = "key"

[command.action.params]
key = "a"

[[command.action]]
action = "click"

[command.action.params]
button = "left"

-----------------------
Command structure
-----------------------

A command in the "usercommands.toml" file looks like this:

[[command]]
regex = "regex"

[[command.action]]
action = "action"

[command.action.params]
param1 = value
param2 = value

There are three main parts:

* Regex
      - The regex is the command itself, which viewers should type in chat.
        This regular expression can also contain special characters for finding parameters such as numbers which can be typed by the viewers. Some examples would be "!click" or "!mouseup ([0-9]+)"

* Action
      - This is the action that gets performed when the command is triggered by players. Several actions are available, and are listed lower down in this document.
      - Multiple actions can be supplied by repeating the action and params section.

* Parameters
      - Parameters are specific to each action, and can be mandatory or optional. An example or a parameter would be the coordinates that the mouse should move to, for a mouseMouse action.

------------
Restrictions
------------

Commands can be restricted to moderators, vips, or subscribers by adding an optional badges option to the command. E.g:

[[command]]
regex = "regex"
action = "action"
badges = "subscriber,moderator,vip"

[command.params]
param1 = value
param2 = value

Commands can also require a minimum number of bits to be used. E.g:

[[command]]
regex = "regex"
action = "action"
bits = 100

[command.params]
param1 = value
param2 = value

----------
Actions
----------

Currently supported actions:
* moveMouse
      - Moves mouse to a fixed location
      - required parameters: x, y
* relmouse
      - Move the mouse a certain distance starting from current location
      - required parameters: x, y
* box
      - Drags a box starting from current mouse position
      - required parameters: x, y
* click
      - Click the mouse
      - optional parameters: button, clicks
      - required parameters: none
* presskey
      - Press a key
      - Required parameters
              - key: Can either be a key name, or list of key names to be pressed simultaneously#                     E.g: key = "left", press left
                         key = ["left", "up"], press left and up at the same time

              PROTIP: For a list of all possible keys, see keys.txt

      - Optional parameters:
              - shift = true, hold down shift while pressing key
              - alt = true, hold down shift while pressing key
              - ctrl = true, hold down shift while pressing key
* wait
      - Wait for a given amount of time, before performing the next action
      - Required parameters: duration

* randomMoveMouse:
      - Move the mouse to a random location, within a defined box
      - Required parameters
            - xmin
            - xmax
            - ymin
            - ymax

------------
Parameters
------------

Parameters can be direct values, or expressions, which must be surrounded by braces: {}

E.g:
[command.action.params]
param1 = 5          # This is just the number 5
param2 = "{4 + 9}"  # This will be calculated when running the program

Regex groups can be created using brackets, (), and accessed in parameters by using group[number] in an expression.

E.g:
[[command]]
regex = "!mouse ([0-9\\.]+) ([0-9\\.]+)"

[[command.action]]
action = "moveMouse"

[command.action.params]
x = "{group[0]}"
y = "{group[1]}"

Configuration parameters can also be accessed via the config dictionary, E.g:

[command.action.params]
x = "{config['defaultDistance']}"
y = "{config['defaultDistance']}"

